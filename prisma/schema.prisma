// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

// For MySQL (PlanetScale, Railway, etc.)
datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// For PostgreSQL (Supabase, etc.) - uncomment and comment out MySQL above
// datasource db {
//   provider = "postgresql"
//   url      = env("DATABASE_URL")
// }

model User {
  id           String       @id @default(cuid())
  clerkId      String       @unique
  name         String?
  email        String?
  age          Int?
  weight       Float?
  sex          String?
  height       Float?
  issues       String?
  motive       String?
  goal         String?
  diet         String?
  imageUrl     String?      @db.LongText
  meals        Meal[]
  workouts     Workout[]
  habits       Habit[]
  mealPlan     MealPlan?
  workoutPlan  WorkoutPlan?
  createdAt    DateTime     @default(now())
  conversations Conversation[]
}

model Contact {
  id        String   @id @default(cuid())
  name      String
  email     String
  message   String   @db.Text
  createdAt DateTime @default(now())
}

model Meal {
  id        String   @id @default(cuid())
  userId    String
  date      DateTime
  calories  Int
  plan      String
  user      User     @relation(fields: [userId], references: [id])
}

model Workout {
  id        String   @id @default(cuid())
  userId    String
  date      DateTime
  type      String
  duration  Int
  plan      String
  user      User     @relation(fields: [userId], references: [id])
}

model Habit {
  id        String   @id @default(cuid())
  userId    String
  type      String
  date      DateTime
  value     Int
  user      User     @relation(fields: [userId], references: [id])
}

model MealPlan {
  id          String   @id @default(cuid())
  userId      String   @unique
  plan        String   @db.Text
  generatedAt DateTime
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model WorkoutPlan {
  id          String   @id @default(cuid())
  userId      String   @unique
  plan        String   @db.Text
  generatedAt DateTime
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Conversation {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  messages  Message[]
  createdAt DateTime @default(now())
}

model Message {
  id              String   @id @default(cuid())
  conversationId  String
  conversation    Conversation @relation(fields: [conversationId], references: [id])
  role            String   // 'user' or 'ai'
  text            String   @db.Text
  createdAt       DateTime @default(now())
}